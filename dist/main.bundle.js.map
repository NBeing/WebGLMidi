{"version":3,"file":"main.bundle.js","mappings":";;;;;;;;;;;;;;AAAA,iEAAe,iCAAiC,8BAA8B,yBAAyB,yBAAyB,iEAAiE,oCAAoC,kDAAkD,uCAAuC,uCAAuC,gCAAgC,oDAAoD,0CAA0C,0CAA0C,+BAA+B,mBAAmB,KAAK,wHAAwH,iGAAiG,gCAAgC,yGAAyG,+BAA+B,mBAAmB,KAAK,wHAAwH,0BAA0B,oNAAoN,gCAAgC,mNAAmN,+BAA+B,mBAAmB,KAAK,4HAA4H,8BAA8B,iGAAiG,gCAAgC,yGAAyG,+BAA+B,mBAAmB,KAAK,oBAAoB,kDAAkD,uDAAuD,6BAA6B,yBAAyB,wBAAwB,uBAAuB,gJAAgJ,kJAAkJ,+DAA+D,oGAAoG,4DAA4D,qIAAqI,2EAA2E,4HAA4H,0EAA0E,4BAA4B,+BAA+B,oLAAoL,0EAA0E,wFAAwF,wBAAwB,8CAA8C,gEAAgE,iEAAiE,mDAAmD,+CAA+C,mFAAmF,KAAK,KAAK;;;;;;;;;;;;;;;ACAx7H,iEAAe,yBAAyB,8BAA8B,8BAA8B,+BAA+B,4BAA4B,yBAAyB,gBAAgB,mDAAmD,iMAAiM,wDAAwD,iDAAiD,yCAAyC,yCAAyC,yDAAyD,KAAK,CAAC;;;;;;UCAtrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNA,2BAA2B,0FAA0C;AACrE,yBAAyB,sFAAwC;AACjkCAAkC,gDAAgD;AAClF,kCAAkC,gDAAgD;AAClF,yCAAyC,gCAAgC;AACzE,uCAAuC,kFAAkF;AACzH,uCAAuC,kFAAkF;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://webgl/./shaders/fragment.glsl","webpack://webgl/./shaders/vertex.glsl","webpack://webgl/webpack/bootstrap","webpack://webgl/webpack/runtime/define property getters","webpack://webgl/webpack/runtime/hasOwnProperty shorthand","webpack://webgl/webpack/runtime/make namespace object","webpack://webgl/./index.js"],"sourcesContent":["export default \"precision mediump float;        \\r\\nuniform vec2 u_resolution;\\r\\nuniform vec2 u_mouse;\\r\\nuniform float u_time;\\r\\n\\r\\nfloat drawRect(vec2 st,  vec2 tr_offset, vec2 bl_offset){\\r\\n    // float size = 1.0 - _size;\\r\\n    // bottom-left\\r\\n    vec2 bl = vec2(0.0);\\r\\n    bl.x = step(bl_offset.x, st.x);\\r\\n    bl.y = step(bl_offset.y, st.y);\\r\\n    float pct = bl.x * bl.y;\\r\\n\\r\\n    // top-right\\r\\n    vec2 tr = vec2(0.0);\\r\\n    tr.x = step(tr_offset.x, 1.-st.x);\\r\\n    tr.y = step(tr_offset.y, 1.-st.y);\\r\\n\\r\\n    pct *= tr.x * tr.y;\\r\\n    return pct;\\r\\n}\\r\\nfloat drawRect2(\\r\\n    vec2 st,\\r\\n    float top, \\r\\n    float left,\\r\\n    float bottom,\\r\\n    float right\\r\\n){\\r\\n    vec2 bl = vec2(\\r\\n        step(left, st.x),\\r\\n        step(1. - bottom, st.y)\\r\\n    );\\r\\n    float pct = bl.x * bl.y;\\r\\n\\r\\n    vec2 tr = vec2(\\r\\n        step(1. - right, 1.-st.x),\\r\\n        step(top, 1.-st.y)\\r\\n    );\\r\\n\\r\\n    pct *= tr.x * tr.y;\\r\\n    return pct;\\r\\n}\\r\\nfloat drawRect3(\\r\\n    vec2 st,\\r\\n    float top, \\r\\n    float left,\\r\\n    float bottom,\\r\\n    float right\\r\\n){\\r\\n    float lerp = 0.01;\\r\\n    vec2 bl = vec2(\\r\\n        smoothstep(left, left + lerp, st.x) - smoothstep(left, left - lerp, st.x),\\r\\n        smoothstep(bottom, bottom + lerp, st.y) - smoothstep(bottom, bottom - lerp, st.y)\\r\\n    );\\r\\n    float pct = bl.x * bl.y;\\r\\n\\r\\n    vec2 tr = vec2(\\r\\n        smoothstep(right, right + .01, st.x) - smoothstep(right, right - lerp, st.x),\\r\\n        smoothstep(top, top + lerp, st.y) - smoothstep(top, top - lerp, st.y)\\r\\n\\r\\n    );\\r\\n\\r\\n    pct *= tr.x * tr.y;\\r\\n    return pct;\\r\\n}\\r\\n\\r\\nfloat drawRect4(\\r\\n    vec2 st,\\r\\n    float top, \\r\\n    float left,\\r\\n    float bottom,\\r\\n    float right\\r\\n){\\r\\n    float thiccness = 0.2;\\r\\n    vec2 bl = vec2(\\r\\n        step(left, st.x),\\r\\n        step(1. - bottom, st.y)\\r\\n    );\\r\\n    float pct = bl.x * bl.y;\\r\\n\\r\\n    vec2 tr = vec2(\\r\\n        step(1. - right, 1.-st.x),\\r\\n        step(top, 1.-st.y)\\r\\n    );\\r\\n\\r\\n    pct *= tr.x * tr.y;\\r\\n    return pct;\\r\\n}\\r\\n\\r\\nvoid main(){\\r\\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\\r\\n    float aspect = u_resolution.x / u_resolution.y;\\r\\n    st.x = st.x * aspect;\\r\\n    vec2 stcopy = st;\\r\\n    st = st * 100.0;\\r\\n    st = fract(st);\\r\\n    float pct  = drawRect2(\\r\\n        st,\\r\\n        0.0,\\r\\n        0.0,\\r\\n        1., //- abs(sin(u_time * 1.)),\\r\\n        1.\\r\\n    );\\r\\n\\r\\n    float pct2 = drawRect2(\\r\\n        st,\\r\\n        0.0,\\r\\n        0.0,\\r\\n        1.0 - abs(sin(u_time * 2.)),\\r\\n        1.\\r\\n    );\\r\\n    \\r\\n    vec2 translate = vec2(cos(u_time),sin(u_time));\\r\\n    float pct3 = smoothstep(0., 0.2, distance(stcopy + translate * .25, vec2(0.5, 0.5/aspect)));\\r\\n\\r\\n    vec2 translate2 = vec2(sin(u_time),sin(u_time));\\r\\n    float pct4 = smoothstep(\\r\\n        0., \\r\\n        0.2, \\r\\n        distance(stcopy + translate2 * .25, vec2(0.5))\\r\\n    );\\r\\n\\r\\n    vec2 translate3 = vec2(- sin(u_time * 1.5),  cos(u_time * 1.));\\r\\n    float pct5 = smoothstep(\\r\\n        0., \\r\\n        0.2,\\r\\n        distance(stcopy + translate3 * .25, vec2(0.5)));\\r\\n\\r\\n    vec2 translate4 = vec2(- sin(u_time * .8),  cos(u_time * 1.));\\r\\n    vec2 rings = stcopy;\\r\\n    rings = rings * 2. -1.;\\r\\n\\r\\n    float pct6 = smoothstep(\\r\\n        0., \\r\\n        0.2,\\r\\n        distance(\\r\\n            stcopy + translate4 * .25, \\r\\n            vec2(0.5)\\r\\n        )\\r\\n    );\\r\\n\\r\\n    vec2 translate5 = vec2(- sin(u_time * 1.),  cos(u_time * 1.));\\r\\n    float pct7 = smoothstep(0., 0.2,distance(stcopy + translate5 * .25, vec2(0.5)));\\r\\n    float pct8 = 1.;smoothstep(0., 0.99, distance(st, vec2(0.5)));\\r\\n\\r\\n    vec3 test  = vec3(pct) *  vec3(0.0, 0.4588, 0.3216);\\r\\n    vec3 test2 = vec3(pct2) *  vec3(0.2, st.y - 0.4, 0.4078);\\r\\n\\r\\n    vec3 bg = vec3(0.0353, 0.1412, 0.2353);\\r\\n    vec3 color = vec3(bg + (test + test2));\\r\\n    gl_FragColor = vec4(color * pct8 *(1.0 -(pct3 * pct4 * pct5 * pct6)), 1.0);\\r\\n}\\r\\n\";","export default \"precision mediump float;\\r\\nattribute vec2 a_position;\\r\\nuniform vec2 u_resolution;\\r\\nuniform vec2 u_translation;\\r\\nuniform vec2 u_rotation;\\r\\nuniform vec2 u_scale;\\r\\nvoid main(){\\r\\n    vec2 scaledPosition = a_position * u_scale;\\r\\n    vec2 rotatedPosition = vec2(\\r\\n        scaledPosition.x * u_rotation.y + scaledPosition.y * u_rotation.x,\\r\\n        scaledPosition.y * u_rotation.y - scaledPosition.x * u_rotation.x);\\r\\n    vec2 position = rotatedPosition + u_translation;\\r\\n    vec2 zeroToOne = position / u_resolution;\\r\\n    vec2 zeroToTwo = zeroToOne * 2.0;\\r\\n    vec2 clipSpace = zeroToTwo - 1.0;\\r\\n    gl_Position = vec4(clipSpace * vec2(1,-1), 0, 1);\\r\\n}\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const fragmentShaderText = require(\"./shaders/fragment.glsl\").default\r\nconst vertexShaderText = require(\"./shaders/vertex.glsl\").default\r\n\r\nlet canvas = document.querySelector(\"#c\")\r\nlet gl = canvas.getContext(\"webgl\")\r\nif(!gl){ throw new Error(\"No WebGl\")}\r\nconsole.log(\"Successfully got context\")\r\n\r\nconst startDate = new Date();\r\nconst startTime = startDate.getTime();\r\n\r\nfunction seconds_elapsed (){\r\n    var date_now = new Date ();\r\n    var time_now = date_now.getTime ();\r\n    var time_diff = time_now - startTime;\r\n    var seconds_elapsed = time_diff / 1000;\r\n\r\n    return ( seconds_elapsed ); \r\n}\r\nfunction resizeCanvasToDisplaySize(canvas) {\r\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n  const displayWidth  = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n \r\n  // Check if the canvas is not the same size.\r\n  const needResize = canvas.width  !== displayWidth ||\r\n                     canvas.height !== displayHeight;\r\n \r\n  if (needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width  = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n \r\n  return needResize;\r\n}\r\nfunction createShader(gl, type, source){\r\n   let shader = gl.createShader(type);\r\n   gl.shaderSource(shader,source);\r\n   gl.compileShader(shader)\r\n   let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\r\n   if(success){\r\n    return shader\r\n   } \r\n   console.log(gl.getShaderInfoLog(shader))\r\n   gl.deleteShader(shader)\r\n}\r\nvar vertexShaderSource = vertexShaderText\r\nvar fragmentShaderSource = fragmentShaderText\r\nvar vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\r\nvar fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource)\r\n\r\nfunction createProgram(gl, vertexShader, fragmentShader){\r\n    let program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS)\r\n    if(success){\r\n        return program\r\n    }\r\n    console.log(gl.getProgramInfoLog(program))\r\n    gl.deleteProgram(program)    \r\n}\r\nlet program = createProgram(gl, vertexShader, fragmentShader)\r\nlet positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\r\nlet positionBuffer = gl.createBuffer()\r\nlet resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\")\r\nlet colorUniformLocation = gl.getUniformLocation(program, \"u_color\")\r\nlet translationUniformLocation = gl.getUniformLocation(program, \"u_translation\")\r\nlet rotationLocation = gl.getUniformLocation(program, \"u_rotation\")\r\nlet scaleLocation = gl.getUniformLocation(program, \"u_scale\")\r\nlet timeLocation = gl.getUniformLocation(program, \"u_time\")\r\n\r\nfunction randomInt(range){\r\n    return Math.floor(Math.random() * range);\r\n}\r\n\r\nfunction setRectangle(gl, x, y, width, height){\r\n    let x1 = x;\r\n    let x2 = x + width;\r\n    let y1 = y;\r\n    let y2 = y + height;\r\n    let positions = [\r\n        x1, y1,\r\n        x2, y1,\r\n        x1, y2,\r\n        x1, y2,\r\n        x2, y1,\r\n        x2, y2\r\n    ]\r\n    gl.bufferData(\r\n        gl.ARRAY_BUFFER, \r\n        new Float32Array(positions), \r\n        gl.STATIC_DRAW\r\n    )\r\n}\r\n\r\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\nsetGeometry(gl);\r\n\r\nlet translation = [0, 0];\r\nlet width = 100;\r\nlet height = 30;\r\nlet color = [Math.random(), Math.random(), Math.random(), 1];\r\nlet rotation = [0,1]\r\nlet scale = [1,1]\r\ndrawScene();\r\n\r\n// Setup a ui.\r\nwebglLessonsUI.setupSlider(\"#x\", {slide: updatePosition(0), max: gl.canvas.width });\r\nwebglLessonsUI.setupSlider(\"#y\", {slide: updatePosition(1), max: gl.canvas.height});\r\nwebglLessonsUI.setupSlider(\"#rotation\", {slide: updateRotation, max: 360});\r\nwebglLessonsUI.setupSlider(\"#scaleX\", {value: scale[0], slide: updateScale(0), min: -5, max: 5, step: 0.01, precision: 2});\r\nwebglLessonsUI.setupSlider(\"#scaleY\", {value: scale[1], slide: updateScale(1), min: -5, max: 5, step: 0.01, precision: 2});\r\n// const handleMouseMove = event => {\r\n//     translation[0] = event.clientX\r\n//     translation[1] = event.clientY\r\n//     // console.log(\"translation\", translation)\r\n//     drawScene() \r\n// }\r\n// document.onmousemove = handleMouseMove\r\n\r\nfunction updatePosition(index) {\r\n    return function(event, ui) {\r\n        translation[index] = ui.value;\r\n        drawScene();\r\n    };\r\n}\r\nfunction updateScale(index) {\r\n    return function(event, ui) {\r\n        scale[index] = ui.value;\r\n        drawScene();\r\n    };\r\n}\r\nfunction updateRotation(event, ui){\r\n    let angleInDegrees = 360 - ui.value;\r\n    let angleInRadians = angleInDegrees * Math.PI / 180;\r\n    rotation[0] = Math.sin(angleInRadians)\r\n    rotation[1] = Math.cos(angleInRadians)\r\n    drawScene()\r\n}\r\nfunction setGeometry(gl) {\r\n    gl.bufferData(\r\n        gl.ARRAY_BUFFER,\r\n        new Float32Array([\r\n            // left column\r\n            0, 0,\r\n            30, 0,\r\n            0, 150,\r\n            0, 150,\r\n            30, 0,\r\n            30, 150,\r\n    \r\n            // top rung\r\n            30, 0,\r\n            100, 0,\r\n            30, 30,\r\n            30, 30,\r\n            100, 0,\r\n            100, 30,\r\n    \r\n            // middle rung\r\n            30, 60,\r\n            67, 60,\r\n            30, 90,\r\n            30, 90,\r\n            67, 60,\r\n            67, 90,\r\n        ]),\r\n        gl.STATIC_DRAW);\r\n}\r\nfunction drawScene(){\r\n    resizeCanvasToDisplaySize(gl.canvas)\r\n    gl.viewport(0,0,gl.canvas.width, gl.canvas.height)\r\n    gl.clearColor(0,0,0,0)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n    gl.useProgram(program)\r\n    gl.enableVertexAttribArray(positionAttributeLocation)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\r\n\r\n    let size = 2\r\n    let type = gl.FLOAT\r\n    let normalize = false\r\n    let stride = 0\r\n    let offset = 0 \r\n    gl.vertexAttribPointer(\r\n        positionAttributeLocation, \r\n        size,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset\r\n        )\r\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height)\r\n    gl.uniform4fv(colorUniformLocation, color)\r\n    gl.uniform2fv(translationUniformLocation, translation);\r\n    gl.uniform2fv(rotationLocation, rotation)\r\n    gl.uniform2fv(scaleLocation, scale)\r\n    gl.uniform1f(timeLocation, seconds_elapsed())\r\n    // offset = 0\r\n    // count = 18\r\n    // gl.drawArrays(primitiveType, offset, count)\r\n    for ( let ii = 0; ii < 50; ++ii){\r\n    setRectangle(\r\n        gl, randomInt(100), randomInt(100),randomInt(500),randomInt(500)\r\n        // gl, 0, 0, window.innerWidth, window.innerHeight\r\n    )\r\n     // Draw the rectangle.\r\n    var primitiveType = gl.TRIANGLES;\r\n    // var offset = 0;\r\n    var count = 6;\r\n    gl.drawArrays(primitiveType, offset, count);\r\n}    \r\n        \r\n}\r\nfunction draw(timestamp){\r\n    drawScene()\r\n    window.requestAnimationFrame(draw);\r\n}\r\n\r\nwindow.requestAnimationFrame(draw);\r\n"],"names":[],"sourceRoot":""}